import System
import Bake.IO.Extensions
import Bake.Compiler.Extensions
import System.IO
import System.Security.Cryptography.X509Certificates
import Microsoft.Win32
import Microsoft.Build.Tasks.Deployment.ManifestUtilities

def Copy(fileSet as FileSet, destination as string):
	for file in fileSet.Files:
		dir = Path.GetDirectoryName(file).Replace(fileSet.BaseDirectory, destination)
		MkDir(dir) if not Exist(dir)
		print "Copying file from ${file} to ${file.Replace(fileSet.BaseDirectory, destination)}"
		Cp(file, file.Replace(fileSet.BaseDirectory, destination))
		
def CopyWithDeploy(fileSet as FileSet, destination as string):
	for file in fileSet.Files:
		dir = Path.GetDirectoryName(file).Replace(fileSet.BaseDirectory, destination)
		MkDir(dir) if not Exist(dir)
		print "Copying file from ${file} to ${file.Replace(fileSet.BaseDirectory, destination)}"
		Cp(file, file.Replace(fileSet.BaseDirectory, destination) + ".deploy")

def GeneratePublishPage(file as string, version as string, productName as string):
	template = System.IO.File.ReadAllText("publish.htm.template")
	result = template.Replace("{version}", version)
	result = result.Replace("{name}", productName)
	System.IO.File.AppendAllText(file, result)

def SdkPath() as string:
	sdkPath = null
	regKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\")
	if regKey:
		sdkPath = regKey.GetValue("CurrentInstallFolder", "").ToString()
		regKey.Close()
	if String.IsNullOrEmpty(sdkPath):
		regKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\")
		if regKey:
			sdkPath = regKey.GetValue("CurrentInstallFolder", "").ToString()
			regKey.Close()
	return sdkPath


def GetAssemblyVersion(assemblyFile as string) as string:
	return System.Reflection.Assembly.LoadFile(assemblyFile).GetName().Version.ToString()

def ClearDir(dirname as string):
	for delDirName in Directory.GetDirectories(dirname):
		Directory.Delete(delDirName, true)
	for fname in Directory.GetFiles(dirname):
		System.IO.File.Delete(fname)


projectName = "UEEditor"
productName = "Редактор нераспознанных выражений"
configuration = "release"
projectPath = Path.GetFullPath("..\\src\\${projectName}\\")
projectFile = "${projectPath}${projectName}.csproj"
buildTo = Path.GetFullPath(".\\${projectName}\\")
publishTo = "\\\\acdcserv\\Publish\\${projectName}\\"
buildPublishTo = Path.GetFullPath(".\\${projectName}Publish\\")
deploymentUrl = "http://publish.analit.net/${projectName}/"
publishVersion = "0.0.0.0";

Task "default", ["build"]

Task "build", ["clean"]:
	MsBuild(projectFile,
			Parameters : { "OutDir" : buildTo,
						   "Configuration" : "release" },
			FrameworkVersion : "3.5").Execute()
	if Exist("${projectPath}App.${configuration}.config"):
		Cp("${projectPath}App.${configuration}.config", "${buildTo}${projectName}.exe.config", true)
	Rm(FileSet("*.*", 
			   BaseDirectory : buildTo,
			   Excludes : ["*.dll", "*.exe", "*.config"]))
	publishVersion = GetAssemblyVersion("${buildTo}${projectName}.exe")
				
Task "clean":
	MsBuild(projectFile,
			Target : "clean",
			Parameters : { "Configuration" : "release" },
			FrameworkVersion : "3.5").Execute()
	RmDir(buildTo, true) if Exist(buildTo)
	MkDir(buildTo)
			
Task "build publish package", ["build", "clean publish package"]:
	certPath = Path.GetFullPath("..\\lib\\InforoomCodeSign.pfx")
	password = "зфыыцщкв"
	Cp("publish.build", "${buildPublishTo}publish.build")
	MsBuild("${buildPublishTo}publish.build", 
			Parameters : { "Version" : publishVersion,
							"MinVersion" : publishVersion,
							"ClickOnceUrl" : deploymentUrl,
							"ClickOnceAppTitle" : productName,
							"SolutionName" : projectName,
							"PublishDir" : buildTo, 
							"SigningCert" : certPath,                                                        
							"Password" : password, 
							"SdkPath" : SdkPath() },
			FrameworkVersion : "3.5").Execute()
	CopyWithDeploy(FileSet("**\\*.*", BaseDirectory : buildTo), buildPublishTo)
	cert = X509Certificate2(System.IO.File.ReadAllBytes(certPath), password)
	Exec("\"${SdkPath()}bin\\signtool.exe\"",
		 "sign /sha1 ${cert.Thumbprint} ${buildPublishTo}setup.exe").Execute()
	Rm("${buildPublishTo}publish.build")
	GeneratePublishPage("${buildPublishTo}publish.htm", publishVersion, productName)

Task "clean publish package":
	RmDir(buildPublishTo, true) if Exist(buildPublishTo)
	MkDir(buildPublishTo)			
			
Task "publish", ["build publish package", "clean publish dir"]:
	Copy(FileSet("**\\*.*", BaseDirectory : buildPublishTo), publishTo)

Task "clean publish dir":
	ClearDir(publishTo)